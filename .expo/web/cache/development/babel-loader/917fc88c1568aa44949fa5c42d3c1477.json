{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar gestures = {};\nexport function getHandler(tag) {\n  if (tag in gestures) return gestures[tag];\n  throw new Error(\"No handler for tag \".concat(tag));\n}\nexport function createGestureHandler(handlerTag, handler) {\n  if (handlerTag in gestures) {\n    throw new Error(\"Handler with tag \".concat(handlerTag, \" already exists\"));\n  }\n\n  gestures[handlerTag] = handler;\n  gestures[handlerTag].handlerTag = handlerTag;\n}\nexport function dropGestureHandler(handlerTag) {\n  getHandler(handlerTag).destroy();\n  delete gestures[handlerTag];\n}\nexport function getNodes() {\n  return _objectSpread({}, gestures);\n}","map":{"version":3,"sources":["NodeManager.ts"],"names":["gestures","tag","handlerTag","getHandler"],"mappings":";;;;;;AAGA,IAAMA,QAAgE,GAAtE,EAAA;AAEA,OAAO,SAAA,UAAA,CAAA,GAAA,EAAiC;AACtC,MAAIC,GAAG,IAAP,QAAA,EAAqB,OAAOD,QAAQ,CAAf,GAAe,CAAf;AAErB,QAAM,IAAA,KAAA,CAAA,sBAAA,MAAA,CAAN,GAAM,CAAA,CAAN;AACD;AAED,OAAO,SAAA,oBAAA,CAAA,UAAA,EAAA,OAAA,EAGL;AACA,MAAIE,UAAU,IAAd,QAAA,EAA4B;AAC1B,UAAM,IAAA,KAAA,CAAA,oBAAA,MAAA,CAAA,UAAA,EAAN,iBAAM,CAAA,CAAN;AACD;;AACDF,EAAAA,QAAQ,CAARA,UAAQ,CAARA,GAJA,OAIAA;AAEAA,EAAAA,QAAQ,CAARA,UAAQ,CAARA,CAAAA,UAAAA,GAAAA,UAAAA;AACD;AAED,OAAO,SAAA,kBAAA,CAAA,UAAA,EAAgD;AACrDG,EAAAA,UAAU,CAAVA,UAAU,CAAVA,CADqD,OACrDA;AAEA,SAAOH,QAAQ,CAAf,UAAe,CAAf;AACD;AAED,OAAO,SAAA,QAAA,GAAoB;AACzB,2BAAYA,QAAZ;AACD","sourcesContent":["import { ValueOf } from '../typeUtils';\nimport { Gestures } from '../RNGestureHandlerModule.web';\n\nconst gestures: Record<number, InstanceType<ValueOf<typeof Gestures>>> = {};\n\nexport function getHandler(tag: number) {\n  if (tag in gestures) return gestures[tag];\n\n  throw new Error(`No handler for tag ${tag}`);\n}\n\nexport function createGestureHandler(\n  handlerTag: number,\n  handler: InstanceType<ValueOf<typeof Gestures>>\n) {\n  if (handlerTag in gestures) {\n    throw new Error(`Handler with tag ${handlerTag} already exists`);\n  }\n  gestures[handlerTag] = handler;\n  // @ts-ignore no types for web handlers yet\n  gestures[handlerTag].handlerTag = handlerTag;\n}\n\nexport function dropGestureHandler(handlerTag: number) {\n  getHandler(handlerTag).destroy();\n  // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n  delete gestures[handlerTag];\n}\n\nexport function getNodes() {\n  return { ...gestures };\n}\n"]},"metadata":{},"sourceType":"module"}